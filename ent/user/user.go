// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "USER_ID"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "PASSWORD"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "USER_NAME"
	// FieldUserStatus holds the string denoting the user_status field in the database.
	FieldUserStatus = "USER_STATUS"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "EMAIL"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "PHONE_NUMBER"
	// FieldJobCd holds the string denoting the job_cd field in the database.
	FieldJobCd = "JOB_CODE"
	// FieldProfileImage holds the string denoting the profile_image field in the database.
	FieldProfileImage = "PROFILE_IMAGE"
	// FieldGithubLink holds the string denoting the github_link field in the database.
	FieldGithubLink = "GITHUB_LINK"
	// FieldBlogLink holds the string denoting the blog_link field in the database.
	FieldBlogLink = "BLOG_LINK"
	// FieldUserText holds the string denoting the user_text field in the database.
	FieldUserText = "USER_TEXT"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "COMPANY"
	// FieldSkill holds the string denoting the skill field in the database.
	FieldSkill = "SKILL"
	// FieldCreateDate holds the string denoting the create_date field in the database.
	FieldCreateDate = "CREATE_DATE"
	// FieldUpdateDate holds the string denoting the update_date field in the database.
	FieldUpdateDate = "UPDATE_DATE"
	// FieldSessionToken holds the string denoting the session_token field in the database.
	FieldSessionToken = "SESSION_TOKEN"
	// FieldSessionExpiry holds the string denoting the session_expiry field in the database.
	FieldSessionExpiry = "SESSION_EXPIRY"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPassword,
	FieldUserName,
	FieldUserStatus,
	FieldEmail,
	FieldPhoneNumber,
	FieldJobCd,
	FieldProfileImage,
	FieldGithubLink,
	FieldBlogLink,
	FieldUserText,
	FieldCompany,
	FieldSkill,
	FieldCreateDate,
	FieldUpdateDate,
	FieldSessionToken,
	FieldSessionExpiry,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	UserNameValidator func(string) error
	// DefaultUserStatus holds the default value on creation for the "user_status" field.
	DefaultUserStatus bool
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// DefaultCreateDate holds the default value on creation for the "create_date" field.
	DefaultCreateDate time.Time
	// DefaultUpdateDate holds the default value on creation for the "update_date" field.
	DefaultUpdateDate time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByUserStatus orders the results by the user_status field.
func ByUserStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserStatus, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByJobCd orders the results by the job_cd field.
func ByJobCd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobCd, opts...).ToFunc()
}

// ByProfileImage orders the results by the profile_image field.
func ByProfileImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileImage, opts...).ToFunc()
}

// ByGithubLink orders the results by the github_link field.
func ByGithubLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubLink, opts...).ToFunc()
}

// ByBlogLink orders the results by the blog_link field.
func ByBlogLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlogLink, opts...).ToFunc()
}

// ByUserText orders the results by the user_text field.
func ByUserText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserText, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// BySkill orders the results by the skill field.
func BySkill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkill, opts...).ToFunc()
}

// ByCreateDate orders the results by the create_date field.
func ByCreateDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateDate, opts...).ToFunc()
}

// ByUpdateDate orders the results by the update_date field.
func ByUpdateDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateDate, opts...).ToFunc()
}

// BySessionToken orders the results by the session_token field.
func BySessionToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionToken, opts...).ToFunc()
}

// BySessionExpiry orders the results by the session_expiry field.
func BySessionExpiry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionExpiry, opts...).ToFunc()
}
