// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DBP/ent/predicate"
	"DBP/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	userId        *string
	password      *string
	userName      *string
	userStatus    *bool
	email         *string
	phoneNumber   *string
	jobCd         *int
	addjobCd      *int
	profileImage  *string
	githubLink    *string
	blogLink      *string
	userText      *string
	company       *string
	skill         *string
	createDate    *time.Time
	updateDate    *time.Time
	lastLoginDate *time.Time
	isAdmin       *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserId sets the "userId" field.
func (m *UserMutation) SetUserId(s string) {
	m.userId = &s
}

// UserId returns the value of the "userId" field in the mutation.
func (m *UserMutation) UserId() (r string, exists bool) {
	v := m.userId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ResetUserId resets all changes to the "userId" field.
func (m *UserMutation) ResetUserId() {
	m.userId = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetUserName sets the "userName" field.
func (m *UserMutation) SetUserName(s string) {
	m.userName = &s
}

// UserName returns the value of the "userName" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.userName
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "userName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "userName" field.
func (m *UserMutation) ResetUserName() {
	m.userName = nil
}

// SetUserStatus sets the "userStatus" field.
func (m *UserMutation) SetUserStatus(b bool) {
	m.userStatus = &b
}

// UserStatus returns the value of the "userStatus" field in the mutation.
func (m *UserMutation) UserStatus() (r bool, exists bool) {
	v := m.userStatus
	if v == nil {
		return
	}
	return *v, true
}

// OldUserStatus returns the old "userStatus" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserStatus: %w", err)
	}
	return oldValue.UserStatus, nil
}

// ResetUserStatus resets all changes to the "userStatus" field.
func (m *UserMutation) ResetUserStatus() {
	m.userStatus = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhoneNumber sets the "phoneNumber" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phoneNumber = &s
}

// PhoneNumber returns the value of the "phoneNumber" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phoneNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phoneNumber" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phoneNumber" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phoneNumber = nil
}

// SetJobCd sets the "jobCd" field.
func (m *UserMutation) SetJobCd(i int) {
	m.jobCd = &i
	m.addjobCd = nil
}

// JobCd returns the value of the "jobCd" field in the mutation.
func (m *UserMutation) JobCd() (r int, exists bool) {
	v := m.jobCd
	if v == nil {
		return
	}
	return *v, true
}

// OldJobCd returns the old "jobCd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldJobCd(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobCd: %w", err)
	}
	return oldValue.JobCd, nil
}

// AddJobCd adds i to the "jobCd" field.
func (m *UserMutation) AddJobCd(i int) {
	if m.addjobCd != nil {
		*m.addjobCd += i
	} else {
		m.addjobCd = &i
	}
}

// AddedJobCd returns the value that was added to the "jobCd" field in this mutation.
func (m *UserMutation) AddedJobCd() (r int, exists bool) {
	v := m.addjobCd
	if v == nil {
		return
	}
	return *v, true
}

// ClearJobCd clears the value of the "jobCd" field.
func (m *UserMutation) ClearJobCd() {
	m.jobCd = nil
	m.addjobCd = nil
	m.clearedFields[user.FieldJobCd] = struct{}{}
}

// JobCdCleared returns if the "jobCd" field was cleared in this mutation.
func (m *UserMutation) JobCdCleared() bool {
	_, ok := m.clearedFields[user.FieldJobCd]
	return ok
}

// ResetJobCd resets all changes to the "jobCd" field.
func (m *UserMutation) ResetJobCd() {
	m.jobCd = nil
	m.addjobCd = nil
	delete(m.clearedFields, user.FieldJobCd)
}

// SetProfileImage sets the "profileImage" field.
func (m *UserMutation) SetProfileImage(s string) {
	m.profileImage = &s
}

// ProfileImage returns the value of the "profileImage" field in the mutation.
func (m *UserMutation) ProfileImage() (r string, exists bool) {
	v := m.profileImage
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileImage returns the old "profileImage" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProfileImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileImage: %w", err)
	}
	return oldValue.ProfileImage, nil
}

// ClearProfileImage clears the value of the "profileImage" field.
func (m *UserMutation) ClearProfileImage() {
	m.profileImage = nil
	m.clearedFields[user.FieldProfileImage] = struct{}{}
}

// ProfileImageCleared returns if the "profileImage" field was cleared in this mutation.
func (m *UserMutation) ProfileImageCleared() bool {
	_, ok := m.clearedFields[user.FieldProfileImage]
	return ok
}

// ResetProfileImage resets all changes to the "profileImage" field.
func (m *UserMutation) ResetProfileImage() {
	m.profileImage = nil
	delete(m.clearedFields, user.FieldProfileImage)
}

// SetGithubLink sets the "githubLink" field.
func (m *UserMutation) SetGithubLink(s string) {
	m.githubLink = &s
}

// GithubLink returns the value of the "githubLink" field in the mutation.
func (m *UserMutation) GithubLink() (r string, exists bool) {
	v := m.githubLink
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubLink returns the old "githubLink" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGithubLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubLink: %w", err)
	}
	return oldValue.GithubLink, nil
}

// ClearGithubLink clears the value of the "githubLink" field.
func (m *UserMutation) ClearGithubLink() {
	m.githubLink = nil
	m.clearedFields[user.FieldGithubLink] = struct{}{}
}

// GithubLinkCleared returns if the "githubLink" field was cleared in this mutation.
func (m *UserMutation) GithubLinkCleared() bool {
	_, ok := m.clearedFields[user.FieldGithubLink]
	return ok
}

// ResetGithubLink resets all changes to the "githubLink" field.
func (m *UserMutation) ResetGithubLink() {
	m.githubLink = nil
	delete(m.clearedFields, user.FieldGithubLink)
}

// SetBlogLink sets the "blogLink" field.
func (m *UserMutation) SetBlogLink(s string) {
	m.blogLink = &s
}

// BlogLink returns the value of the "blogLink" field in the mutation.
func (m *UserMutation) BlogLink() (r string, exists bool) {
	v := m.blogLink
	if v == nil {
		return
	}
	return *v, true
}

// OldBlogLink returns the old "blogLink" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBlogLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlogLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlogLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlogLink: %w", err)
	}
	return oldValue.BlogLink, nil
}

// ClearBlogLink clears the value of the "blogLink" field.
func (m *UserMutation) ClearBlogLink() {
	m.blogLink = nil
	m.clearedFields[user.FieldBlogLink] = struct{}{}
}

// BlogLinkCleared returns if the "blogLink" field was cleared in this mutation.
func (m *UserMutation) BlogLinkCleared() bool {
	_, ok := m.clearedFields[user.FieldBlogLink]
	return ok
}

// ResetBlogLink resets all changes to the "blogLink" field.
func (m *UserMutation) ResetBlogLink() {
	m.blogLink = nil
	delete(m.clearedFields, user.FieldBlogLink)
}

// SetUserText sets the "userText" field.
func (m *UserMutation) SetUserText(s string) {
	m.userText = &s
}

// UserText returns the value of the "userText" field in the mutation.
func (m *UserMutation) UserText() (r string, exists bool) {
	v := m.userText
	if v == nil {
		return
	}
	return *v, true
}

// OldUserText returns the old "userText" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserText: %w", err)
	}
	return oldValue.UserText, nil
}

// ClearUserText clears the value of the "userText" field.
func (m *UserMutation) ClearUserText() {
	m.userText = nil
	m.clearedFields[user.FieldUserText] = struct{}{}
}

// UserTextCleared returns if the "userText" field was cleared in this mutation.
func (m *UserMutation) UserTextCleared() bool {
	_, ok := m.clearedFields[user.FieldUserText]
	return ok
}

// ResetUserText resets all changes to the "userText" field.
func (m *UserMutation) ResetUserText() {
	m.userText = nil
	delete(m.clearedFields, user.FieldUserText)
}

// SetCompany sets the "company" field.
func (m *UserMutation) SetCompany(s string) {
	m.company = &s
}

// Company returns the value of the "company" field in the mutation.
func (m *UserMutation) Company() (r string, exists bool) {
	v := m.company
	if v == nil {
		return
	}
	return *v, true
}

// OldCompany returns the old "company" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCompany(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompany is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompany requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompany: %w", err)
	}
	return oldValue.Company, nil
}

// ClearCompany clears the value of the "company" field.
func (m *UserMutation) ClearCompany() {
	m.company = nil
	m.clearedFields[user.FieldCompany] = struct{}{}
}

// CompanyCleared returns if the "company" field was cleared in this mutation.
func (m *UserMutation) CompanyCleared() bool {
	_, ok := m.clearedFields[user.FieldCompany]
	return ok
}

// ResetCompany resets all changes to the "company" field.
func (m *UserMutation) ResetCompany() {
	m.company = nil
	delete(m.clearedFields, user.FieldCompany)
}

// SetSkill sets the "skill" field.
func (m *UserMutation) SetSkill(s string) {
	m.skill = &s
}

// Skill returns the value of the "skill" field in the mutation.
func (m *UserMutation) Skill() (r string, exists bool) {
	v := m.skill
	if v == nil {
		return
	}
	return *v, true
}

// OldSkill returns the old "skill" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSkill(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSkill is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSkill requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkill: %w", err)
	}
	return oldValue.Skill, nil
}

// ClearSkill clears the value of the "skill" field.
func (m *UserMutation) ClearSkill() {
	m.skill = nil
	m.clearedFields[user.FieldSkill] = struct{}{}
}

// SkillCleared returns if the "skill" field was cleared in this mutation.
func (m *UserMutation) SkillCleared() bool {
	_, ok := m.clearedFields[user.FieldSkill]
	return ok
}

// ResetSkill resets all changes to the "skill" field.
func (m *UserMutation) ResetSkill() {
	m.skill = nil
	delete(m.clearedFields, user.FieldSkill)
}

// SetCreateDate sets the "createDate" field.
func (m *UserMutation) SetCreateDate(t time.Time) {
	m.createDate = &t
}

// CreateDate returns the value of the "createDate" field in the mutation.
func (m *UserMutation) CreateDate() (r time.Time, exists bool) {
	v := m.createDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "createDate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "createDate" field.
func (m *UserMutation) ResetCreateDate() {
	m.createDate = nil
}

// SetUpdateDate sets the "updateDate" field.
func (m *UserMutation) SetUpdateDate(t time.Time) {
	m.updateDate = &t
}

// UpdateDate returns the value of the "updateDate" field in the mutation.
func (m *UserMutation) UpdateDate() (r time.Time, exists bool) {
	v := m.updateDate
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateDate returns the old "updateDate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateDate: %w", err)
	}
	return oldValue.UpdateDate, nil
}

// ResetUpdateDate resets all changes to the "updateDate" field.
func (m *UserMutation) ResetUpdateDate() {
	m.updateDate = nil
}

// SetLastLoginDate sets the "lastLoginDate" field.
func (m *UserMutation) SetLastLoginDate(t time.Time) {
	m.lastLoginDate = &t
}

// LastLoginDate returns the value of the "lastLoginDate" field in the mutation.
func (m *UserMutation) LastLoginDate() (r time.Time, exists bool) {
	v := m.lastLoginDate
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginDate returns the old "lastLoginDate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginDate: %w", err)
	}
	return oldValue.LastLoginDate, nil
}

// ClearLastLoginDate clears the value of the "lastLoginDate" field.
func (m *UserMutation) ClearLastLoginDate() {
	m.lastLoginDate = nil
	m.clearedFields[user.FieldLastLoginDate] = struct{}{}
}

// LastLoginDateCleared returns if the "lastLoginDate" field was cleared in this mutation.
func (m *UserMutation) LastLoginDateCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginDate]
	return ok
}

// ResetLastLoginDate resets all changes to the "lastLoginDate" field.
func (m *UserMutation) ResetLastLoginDate() {
	m.lastLoginDate = nil
	delete(m.clearedFields, user.FieldLastLoginDate)
}

// SetIsAdmin sets the "isAdmin" field.
func (m *UserMutation) SetIsAdmin(b bool) {
	m.isAdmin = &b
}

// IsAdmin returns the value of the "isAdmin" field in the mutation.
func (m *UserMutation) IsAdmin() (r bool, exists bool) {
	v := m.isAdmin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "isAdmin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// ResetIsAdmin resets all changes to the "isAdmin" field.
func (m *UserMutation) ResetIsAdmin() {
	m.isAdmin = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.userId != nil {
		fields = append(fields, user.FieldUserId)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.userName != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.userStatus != nil {
		fields = append(fields, user.FieldUserStatus)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phoneNumber != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.jobCd != nil {
		fields = append(fields, user.FieldJobCd)
	}
	if m.profileImage != nil {
		fields = append(fields, user.FieldProfileImage)
	}
	if m.githubLink != nil {
		fields = append(fields, user.FieldGithubLink)
	}
	if m.blogLink != nil {
		fields = append(fields, user.FieldBlogLink)
	}
	if m.userText != nil {
		fields = append(fields, user.FieldUserText)
	}
	if m.company != nil {
		fields = append(fields, user.FieldCompany)
	}
	if m.skill != nil {
		fields = append(fields, user.FieldSkill)
	}
	if m.createDate != nil {
		fields = append(fields, user.FieldCreateDate)
	}
	if m.updateDate != nil {
		fields = append(fields, user.FieldUpdateDate)
	}
	if m.lastLoginDate != nil {
		fields = append(fields, user.FieldLastLoginDate)
	}
	if m.isAdmin != nil {
		fields = append(fields, user.FieldIsAdmin)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserId:
		return m.UserId()
	case user.FieldPassword:
		return m.Password()
	case user.FieldUserName:
		return m.UserName()
	case user.FieldUserStatus:
		return m.UserStatus()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldJobCd:
		return m.JobCd()
	case user.FieldProfileImage:
		return m.ProfileImage()
	case user.FieldGithubLink:
		return m.GithubLink()
	case user.FieldBlogLink:
		return m.BlogLink()
	case user.FieldUserText:
		return m.UserText()
	case user.FieldCompany:
		return m.Company()
	case user.FieldSkill:
		return m.Skill()
	case user.FieldCreateDate:
		return m.CreateDate()
	case user.FieldUpdateDate:
		return m.UpdateDate()
	case user.FieldLastLoginDate:
		return m.LastLoginDate()
	case user.FieldIsAdmin:
		return m.IsAdmin()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserId:
		return m.OldUserId(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldUserStatus:
		return m.OldUserStatus(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldJobCd:
		return m.OldJobCd(ctx)
	case user.FieldProfileImage:
		return m.OldProfileImage(ctx)
	case user.FieldGithubLink:
		return m.OldGithubLink(ctx)
	case user.FieldBlogLink:
		return m.OldBlogLink(ctx)
	case user.FieldUserText:
		return m.OldUserText(ctx)
	case user.FieldCompany:
		return m.OldCompany(ctx)
	case user.FieldSkill:
		return m.OldSkill(ctx)
	case user.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case user.FieldUpdateDate:
		return m.OldUpdateDate(ctx)
	case user.FieldLastLoginDate:
		return m.OldLastLoginDate(ctx)
	case user.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldUserStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserStatus(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldJobCd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobCd(v)
		return nil
	case user.FieldProfileImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileImage(v)
		return nil
	case user.FieldGithubLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubLink(v)
		return nil
	case user.FieldBlogLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlogLink(v)
		return nil
	case user.FieldUserText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserText(v)
		return nil
	case user.FieldCompany:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompany(v)
		return nil
	case user.FieldSkill:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkill(v)
		return nil
	case user.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case user.FieldUpdateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateDate(v)
		return nil
	case user.FieldLastLoginDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginDate(v)
		return nil
	case user.FieldIsAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addjobCd != nil {
		fields = append(fields, user.FieldJobCd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldJobCd:
		return m.AddedJobCd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldJobCd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJobCd(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldJobCd) {
		fields = append(fields, user.FieldJobCd)
	}
	if m.FieldCleared(user.FieldProfileImage) {
		fields = append(fields, user.FieldProfileImage)
	}
	if m.FieldCleared(user.FieldGithubLink) {
		fields = append(fields, user.FieldGithubLink)
	}
	if m.FieldCleared(user.FieldBlogLink) {
		fields = append(fields, user.FieldBlogLink)
	}
	if m.FieldCleared(user.FieldUserText) {
		fields = append(fields, user.FieldUserText)
	}
	if m.FieldCleared(user.FieldCompany) {
		fields = append(fields, user.FieldCompany)
	}
	if m.FieldCleared(user.FieldSkill) {
		fields = append(fields, user.FieldSkill)
	}
	if m.FieldCleared(user.FieldLastLoginDate) {
		fields = append(fields, user.FieldLastLoginDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldJobCd:
		m.ClearJobCd()
		return nil
	case user.FieldProfileImage:
		m.ClearProfileImage()
		return nil
	case user.FieldGithubLink:
		m.ClearGithubLink()
		return nil
	case user.FieldBlogLink:
		m.ClearBlogLink()
		return nil
	case user.FieldUserText:
		m.ClearUserText()
		return nil
	case user.FieldCompany:
		m.ClearCompany()
		return nil
	case user.FieldSkill:
		m.ClearSkill()
		return nil
	case user.FieldLastLoginDate:
		m.ClearLastLoginDate()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserId:
		m.ResetUserId()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldUserStatus:
		m.ResetUserStatus()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldJobCd:
		m.ResetJobCd()
		return nil
	case user.FieldProfileImage:
		m.ResetProfileImage()
		return nil
	case user.FieldGithubLink:
		m.ResetGithubLink()
		return nil
	case user.FieldBlogLink:
		m.ResetBlogLink()
		return nil
	case user.FieldUserText:
		m.ResetUserText()
		return nil
	case user.FieldCompany:
		m.ResetCompany()
		return nil
	case user.FieldSkill:
		m.ResetSkill()
		return nil
	case user.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case user.FieldUpdateDate:
		m.ResetUpdateDate()
		return nil
	case user.FieldLastLoginDate:
		m.ResetLastLoginDate()
		return nil
	case user.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
