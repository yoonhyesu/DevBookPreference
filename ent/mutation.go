// Code generated by ent, DO NOT EDIT.

package ent

import (
	"SpaceDev/ent/predicate"
	"SpaceDev/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	user_id        *string
	password       *string
	user_name      *string
	user_status    *bool
	email          *string
	phone_number   *string
	job_cd         *int
	addjob_cd      *int
	profile_image  *string
	github_link    *string
	blog_link      *string
	user_text      *string
	company        *string
	skill          *string
	create_date    *time.Time
	update_date    *time.Time
	session_token  *string
	session_expiry *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetUserName sets the "user_name" field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetUserStatus sets the "user_status" field.
func (m *UserMutation) SetUserStatus(b bool) {
	m.user_status = &b
}

// UserStatus returns the value of the "user_status" field in the mutation.
func (m *UserMutation) UserStatus() (r bool, exists bool) {
	v := m.user_status
	if v == nil {
		return
	}
	return *v, true
}

// OldUserStatus returns the old "user_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserStatus: %w", err)
	}
	return oldValue.UserStatus, nil
}

// ResetUserStatus resets all changes to the "user_status" field.
func (m *UserMutation) ResetUserStatus() {
	m.user_status = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetJobCd sets the "job_cd" field.
func (m *UserMutation) SetJobCd(i int) {
	m.job_cd = &i
	m.addjob_cd = nil
}

// JobCd returns the value of the "job_cd" field in the mutation.
func (m *UserMutation) JobCd() (r int, exists bool) {
	v := m.job_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldJobCd returns the old "job_cd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldJobCd(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobCd: %w", err)
	}
	return oldValue.JobCd, nil
}

// AddJobCd adds i to the "job_cd" field.
func (m *UserMutation) AddJobCd(i int) {
	if m.addjob_cd != nil {
		*m.addjob_cd += i
	} else {
		m.addjob_cd = &i
	}
}

// AddedJobCd returns the value that was added to the "job_cd" field in this mutation.
func (m *UserMutation) AddedJobCd() (r int, exists bool) {
	v := m.addjob_cd
	if v == nil {
		return
	}
	return *v, true
}

// ClearJobCd clears the value of the "job_cd" field.
func (m *UserMutation) ClearJobCd() {
	m.job_cd = nil
	m.addjob_cd = nil
	m.clearedFields[user.FieldJobCd] = struct{}{}
}

// JobCdCleared returns if the "job_cd" field was cleared in this mutation.
func (m *UserMutation) JobCdCleared() bool {
	_, ok := m.clearedFields[user.FieldJobCd]
	return ok
}

// ResetJobCd resets all changes to the "job_cd" field.
func (m *UserMutation) ResetJobCd() {
	m.job_cd = nil
	m.addjob_cd = nil
	delete(m.clearedFields, user.FieldJobCd)
}

// SetProfileImage sets the "profile_image" field.
func (m *UserMutation) SetProfileImage(s string) {
	m.profile_image = &s
}

// ProfileImage returns the value of the "profile_image" field in the mutation.
func (m *UserMutation) ProfileImage() (r string, exists bool) {
	v := m.profile_image
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileImage returns the old "profile_image" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProfileImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileImage: %w", err)
	}
	return oldValue.ProfileImage, nil
}

// ClearProfileImage clears the value of the "profile_image" field.
func (m *UserMutation) ClearProfileImage() {
	m.profile_image = nil
	m.clearedFields[user.FieldProfileImage] = struct{}{}
}

// ProfileImageCleared returns if the "profile_image" field was cleared in this mutation.
func (m *UserMutation) ProfileImageCleared() bool {
	_, ok := m.clearedFields[user.FieldProfileImage]
	return ok
}

// ResetProfileImage resets all changes to the "profile_image" field.
func (m *UserMutation) ResetProfileImage() {
	m.profile_image = nil
	delete(m.clearedFields, user.FieldProfileImage)
}

// SetGithubLink sets the "github_link" field.
func (m *UserMutation) SetGithubLink(s string) {
	m.github_link = &s
}

// GithubLink returns the value of the "github_link" field in the mutation.
func (m *UserMutation) GithubLink() (r string, exists bool) {
	v := m.github_link
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubLink returns the old "github_link" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGithubLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubLink: %w", err)
	}
	return oldValue.GithubLink, nil
}

// ClearGithubLink clears the value of the "github_link" field.
func (m *UserMutation) ClearGithubLink() {
	m.github_link = nil
	m.clearedFields[user.FieldGithubLink] = struct{}{}
}

// GithubLinkCleared returns if the "github_link" field was cleared in this mutation.
func (m *UserMutation) GithubLinkCleared() bool {
	_, ok := m.clearedFields[user.FieldGithubLink]
	return ok
}

// ResetGithubLink resets all changes to the "github_link" field.
func (m *UserMutation) ResetGithubLink() {
	m.github_link = nil
	delete(m.clearedFields, user.FieldGithubLink)
}

// SetBlogLink sets the "blog_link" field.
func (m *UserMutation) SetBlogLink(s string) {
	m.blog_link = &s
}

// BlogLink returns the value of the "blog_link" field in the mutation.
func (m *UserMutation) BlogLink() (r string, exists bool) {
	v := m.blog_link
	if v == nil {
		return
	}
	return *v, true
}

// OldBlogLink returns the old "blog_link" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBlogLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlogLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlogLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlogLink: %w", err)
	}
	return oldValue.BlogLink, nil
}

// ClearBlogLink clears the value of the "blog_link" field.
func (m *UserMutation) ClearBlogLink() {
	m.blog_link = nil
	m.clearedFields[user.FieldBlogLink] = struct{}{}
}

// BlogLinkCleared returns if the "blog_link" field was cleared in this mutation.
func (m *UserMutation) BlogLinkCleared() bool {
	_, ok := m.clearedFields[user.FieldBlogLink]
	return ok
}

// ResetBlogLink resets all changes to the "blog_link" field.
func (m *UserMutation) ResetBlogLink() {
	m.blog_link = nil
	delete(m.clearedFields, user.FieldBlogLink)
}

// SetUserText sets the "user_text" field.
func (m *UserMutation) SetUserText(s string) {
	m.user_text = &s
}

// UserText returns the value of the "user_text" field in the mutation.
func (m *UserMutation) UserText() (r string, exists bool) {
	v := m.user_text
	if v == nil {
		return
	}
	return *v, true
}

// OldUserText returns the old "user_text" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserText: %w", err)
	}
	return oldValue.UserText, nil
}

// ClearUserText clears the value of the "user_text" field.
func (m *UserMutation) ClearUserText() {
	m.user_text = nil
	m.clearedFields[user.FieldUserText] = struct{}{}
}

// UserTextCleared returns if the "user_text" field was cleared in this mutation.
func (m *UserMutation) UserTextCleared() bool {
	_, ok := m.clearedFields[user.FieldUserText]
	return ok
}

// ResetUserText resets all changes to the "user_text" field.
func (m *UserMutation) ResetUserText() {
	m.user_text = nil
	delete(m.clearedFields, user.FieldUserText)
}

// SetCompany sets the "company" field.
func (m *UserMutation) SetCompany(s string) {
	m.company = &s
}

// Company returns the value of the "company" field in the mutation.
func (m *UserMutation) Company() (r string, exists bool) {
	v := m.company
	if v == nil {
		return
	}
	return *v, true
}

// OldCompany returns the old "company" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCompany(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompany is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompany requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompany: %w", err)
	}
	return oldValue.Company, nil
}

// ClearCompany clears the value of the "company" field.
func (m *UserMutation) ClearCompany() {
	m.company = nil
	m.clearedFields[user.FieldCompany] = struct{}{}
}

// CompanyCleared returns if the "company" field was cleared in this mutation.
func (m *UserMutation) CompanyCleared() bool {
	_, ok := m.clearedFields[user.FieldCompany]
	return ok
}

// ResetCompany resets all changes to the "company" field.
func (m *UserMutation) ResetCompany() {
	m.company = nil
	delete(m.clearedFields, user.FieldCompany)
}

// SetSkill sets the "skill" field.
func (m *UserMutation) SetSkill(s string) {
	m.skill = &s
}

// Skill returns the value of the "skill" field in the mutation.
func (m *UserMutation) Skill() (r string, exists bool) {
	v := m.skill
	if v == nil {
		return
	}
	return *v, true
}

// OldSkill returns the old "skill" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSkill(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSkill is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSkill requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkill: %w", err)
	}
	return oldValue.Skill, nil
}

// ClearSkill clears the value of the "skill" field.
func (m *UserMutation) ClearSkill() {
	m.skill = nil
	m.clearedFields[user.FieldSkill] = struct{}{}
}

// SkillCleared returns if the "skill" field was cleared in this mutation.
func (m *UserMutation) SkillCleared() bool {
	_, ok := m.clearedFields[user.FieldSkill]
	return ok
}

// ResetSkill resets all changes to the "skill" field.
func (m *UserMutation) ResetSkill() {
	m.skill = nil
	delete(m.clearedFields, user.FieldSkill)
}

// SetCreateDate sets the "create_date" field.
func (m *UserMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *UserMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *UserMutation) ResetCreateDate() {
	m.create_date = nil
}

// SetUpdateDate sets the "update_date" field.
func (m *UserMutation) SetUpdateDate(t time.Time) {
	m.update_date = &t
}

// UpdateDate returns the value of the "update_date" field in the mutation.
func (m *UserMutation) UpdateDate() (r time.Time, exists bool) {
	v := m.update_date
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateDate returns the old "update_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateDate: %w", err)
	}
	return oldValue.UpdateDate, nil
}

// ResetUpdateDate resets all changes to the "update_date" field.
func (m *UserMutation) ResetUpdateDate() {
	m.update_date = nil
}

// SetSessionToken sets the "session_token" field.
func (m *UserMutation) SetSessionToken(s string) {
	m.session_token = &s
}

// SessionToken returns the value of the "session_token" field in the mutation.
func (m *UserMutation) SessionToken() (r string, exists bool) {
	v := m.session_token
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionToken returns the old "session_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSessionToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionToken: %w", err)
	}
	return oldValue.SessionToken, nil
}

// ClearSessionToken clears the value of the "session_token" field.
func (m *UserMutation) ClearSessionToken() {
	m.session_token = nil
	m.clearedFields[user.FieldSessionToken] = struct{}{}
}

// SessionTokenCleared returns if the "session_token" field was cleared in this mutation.
func (m *UserMutation) SessionTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldSessionToken]
	return ok
}

// ResetSessionToken resets all changes to the "session_token" field.
func (m *UserMutation) ResetSessionToken() {
	m.session_token = nil
	delete(m.clearedFields, user.FieldSessionToken)
}

// SetSessionExpiry sets the "session_expiry" field.
func (m *UserMutation) SetSessionExpiry(t time.Time) {
	m.session_expiry = &t
}

// SessionExpiry returns the value of the "session_expiry" field in the mutation.
func (m *UserMutation) SessionExpiry() (r time.Time, exists bool) {
	v := m.session_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionExpiry returns the old "session_expiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSessionExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionExpiry: %w", err)
	}
	return oldValue.SessionExpiry, nil
}

// ClearSessionExpiry clears the value of the "session_expiry" field.
func (m *UserMutation) ClearSessionExpiry() {
	m.session_expiry = nil
	m.clearedFields[user.FieldSessionExpiry] = struct{}{}
}

// SessionExpiryCleared returns if the "session_expiry" field was cleared in this mutation.
func (m *UserMutation) SessionExpiryCleared() bool {
	_, ok := m.clearedFields[user.FieldSessionExpiry]
	return ok
}

// ResetSessionExpiry resets all changes to the "session_expiry" field.
func (m *UserMutation) ResetSessionExpiry() {
	m.session_expiry = nil
	delete(m.clearedFields, user.FieldSessionExpiry)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.user_status != nil {
		fields = append(fields, user.FieldUserStatus)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.job_cd != nil {
		fields = append(fields, user.FieldJobCd)
	}
	if m.profile_image != nil {
		fields = append(fields, user.FieldProfileImage)
	}
	if m.github_link != nil {
		fields = append(fields, user.FieldGithubLink)
	}
	if m.blog_link != nil {
		fields = append(fields, user.FieldBlogLink)
	}
	if m.user_text != nil {
		fields = append(fields, user.FieldUserText)
	}
	if m.company != nil {
		fields = append(fields, user.FieldCompany)
	}
	if m.skill != nil {
		fields = append(fields, user.FieldSkill)
	}
	if m.create_date != nil {
		fields = append(fields, user.FieldCreateDate)
	}
	if m.update_date != nil {
		fields = append(fields, user.FieldUpdateDate)
	}
	if m.session_token != nil {
		fields = append(fields, user.FieldSessionToken)
	}
	if m.session_expiry != nil {
		fields = append(fields, user.FieldSessionExpiry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.UserID()
	case user.FieldPassword:
		return m.Password()
	case user.FieldUserName:
		return m.UserName()
	case user.FieldUserStatus:
		return m.UserStatus()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldJobCd:
		return m.JobCd()
	case user.FieldProfileImage:
		return m.ProfileImage()
	case user.FieldGithubLink:
		return m.GithubLink()
	case user.FieldBlogLink:
		return m.BlogLink()
	case user.FieldUserText:
		return m.UserText()
	case user.FieldCompany:
		return m.Company()
	case user.FieldSkill:
		return m.Skill()
	case user.FieldCreateDate:
		return m.CreateDate()
	case user.FieldUpdateDate:
		return m.UpdateDate()
	case user.FieldSessionToken:
		return m.SessionToken()
	case user.FieldSessionExpiry:
		return m.SessionExpiry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldUserStatus:
		return m.OldUserStatus(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldJobCd:
		return m.OldJobCd(ctx)
	case user.FieldProfileImage:
		return m.OldProfileImage(ctx)
	case user.FieldGithubLink:
		return m.OldGithubLink(ctx)
	case user.FieldBlogLink:
		return m.OldBlogLink(ctx)
	case user.FieldUserText:
		return m.OldUserText(ctx)
	case user.FieldCompany:
		return m.OldCompany(ctx)
	case user.FieldSkill:
		return m.OldSkill(ctx)
	case user.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case user.FieldUpdateDate:
		return m.OldUpdateDate(ctx)
	case user.FieldSessionToken:
		return m.OldSessionToken(ctx)
	case user.FieldSessionExpiry:
		return m.OldSessionExpiry(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldUserStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserStatus(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldJobCd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobCd(v)
		return nil
	case user.FieldProfileImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileImage(v)
		return nil
	case user.FieldGithubLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubLink(v)
		return nil
	case user.FieldBlogLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlogLink(v)
		return nil
	case user.FieldUserText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserText(v)
		return nil
	case user.FieldCompany:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompany(v)
		return nil
	case user.FieldSkill:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkill(v)
		return nil
	case user.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case user.FieldUpdateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateDate(v)
		return nil
	case user.FieldSessionToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionToken(v)
		return nil
	case user.FieldSessionExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addjob_cd != nil {
		fields = append(fields, user.FieldJobCd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldJobCd:
		return m.AddedJobCd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldJobCd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJobCd(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldJobCd) {
		fields = append(fields, user.FieldJobCd)
	}
	if m.FieldCleared(user.FieldProfileImage) {
		fields = append(fields, user.FieldProfileImage)
	}
	if m.FieldCleared(user.FieldGithubLink) {
		fields = append(fields, user.FieldGithubLink)
	}
	if m.FieldCleared(user.FieldBlogLink) {
		fields = append(fields, user.FieldBlogLink)
	}
	if m.FieldCleared(user.FieldUserText) {
		fields = append(fields, user.FieldUserText)
	}
	if m.FieldCleared(user.FieldCompany) {
		fields = append(fields, user.FieldCompany)
	}
	if m.FieldCleared(user.FieldSkill) {
		fields = append(fields, user.FieldSkill)
	}
	if m.FieldCleared(user.FieldSessionToken) {
		fields = append(fields, user.FieldSessionToken)
	}
	if m.FieldCleared(user.FieldSessionExpiry) {
		fields = append(fields, user.FieldSessionExpiry)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldJobCd:
		m.ClearJobCd()
		return nil
	case user.FieldProfileImage:
		m.ClearProfileImage()
		return nil
	case user.FieldGithubLink:
		m.ClearGithubLink()
		return nil
	case user.FieldBlogLink:
		m.ClearBlogLink()
		return nil
	case user.FieldUserText:
		m.ClearUserText()
		return nil
	case user.FieldCompany:
		m.ClearCompany()
		return nil
	case user.FieldSkill:
		m.ClearSkill()
		return nil
	case user.FieldSessionToken:
		m.ClearSessionToken()
		return nil
	case user.FieldSessionExpiry:
		m.ClearSessionExpiry()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldUserStatus:
		m.ResetUserStatus()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldJobCd:
		m.ResetJobCd()
		return nil
	case user.FieldProfileImage:
		m.ResetProfileImage()
		return nil
	case user.FieldGithubLink:
		m.ResetGithubLink()
		return nil
	case user.FieldBlogLink:
		m.ResetBlogLink()
		return nil
	case user.FieldUserText:
		m.ResetUserText()
		return nil
	case user.FieldCompany:
		m.ResetCompany()
		return nil
	case user.FieldSkill:
		m.ResetSkill()
		return nil
	case user.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case user.FieldUpdateDate:
		m.ResetUpdateDate()
		return nil
	case user.FieldSessionToken:
		m.ResetSessionToken()
		return nil
	case user.FieldSessionExpiry:
		m.ResetSessionExpiry()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
