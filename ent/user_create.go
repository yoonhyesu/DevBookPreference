// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DBP/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (uc *UserCreate) SetUserId(s string) *UserCreate {
	uc.mutation.SetUserId(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetUserName sets the "userName" field.
func (uc *UserCreate) SetUserName(s string) *UserCreate {
	uc.mutation.SetUserName(s)
	return uc
}

// SetUserStatus sets the "userStatus" field.
func (uc *UserCreate) SetUserStatus(b bool) *UserCreate {
	uc.mutation.SetUserStatus(b)
	return uc
}

// SetNillableUserStatus sets the "userStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetUserStatus(*b)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPhoneNumber sets the "phoneNumber" field.
func (uc *UserCreate) SetPhoneNumber(s string) *UserCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetJobCd sets the "jobCd" field.
func (uc *UserCreate) SetJobCd(i int) *UserCreate {
	uc.mutation.SetJobCd(i)
	return uc
}

// SetNillableJobCd sets the "jobCd" field if the given value is not nil.
func (uc *UserCreate) SetNillableJobCd(i *int) *UserCreate {
	if i != nil {
		uc.SetJobCd(*i)
	}
	return uc
}

// SetProfileImage sets the "profileImage" field.
func (uc *UserCreate) SetProfileImage(s string) *UserCreate {
	uc.mutation.SetProfileImage(s)
	return uc
}

// SetNillableProfileImage sets the "profileImage" field if the given value is not nil.
func (uc *UserCreate) SetNillableProfileImage(s *string) *UserCreate {
	if s != nil {
		uc.SetProfileImage(*s)
	}
	return uc
}

// SetGithubLink sets the "githubLink" field.
func (uc *UserCreate) SetGithubLink(s string) *UserCreate {
	uc.mutation.SetGithubLink(s)
	return uc
}

// SetNillableGithubLink sets the "githubLink" field if the given value is not nil.
func (uc *UserCreate) SetNillableGithubLink(s *string) *UserCreate {
	if s != nil {
		uc.SetGithubLink(*s)
	}
	return uc
}

// SetBlogLink sets the "blogLink" field.
func (uc *UserCreate) SetBlogLink(s string) *UserCreate {
	uc.mutation.SetBlogLink(s)
	return uc
}

// SetNillableBlogLink sets the "blogLink" field if the given value is not nil.
func (uc *UserCreate) SetNillableBlogLink(s *string) *UserCreate {
	if s != nil {
		uc.SetBlogLink(*s)
	}
	return uc
}

// SetUserText sets the "userText" field.
func (uc *UserCreate) SetUserText(s string) *UserCreate {
	uc.mutation.SetUserText(s)
	return uc
}

// SetNillableUserText sets the "userText" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserText(s *string) *UserCreate {
	if s != nil {
		uc.SetUserText(*s)
	}
	return uc
}

// SetCompany sets the "company" field.
func (uc *UserCreate) SetCompany(s string) *UserCreate {
	uc.mutation.SetCompany(s)
	return uc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uc *UserCreate) SetNillableCompany(s *string) *UserCreate {
	if s != nil {
		uc.SetCompany(*s)
	}
	return uc
}

// SetSkill sets the "skill" field.
func (uc *UserCreate) SetSkill(s string) *UserCreate {
	uc.mutation.SetSkill(s)
	return uc
}

// SetNillableSkill sets the "skill" field if the given value is not nil.
func (uc *UserCreate) SetNillableSkill(s *string) *UserCreate {
	if s != nil {
		uc.SetSkill(*s)
	}
	return uc
}

// SetCreateDate sets the "createDate" field.
func (uc *UserCreate) SetCreateDate(t time.Time) *UserCreate {
	uc.mutation.SetCreateDate(t)
	return uc
}

// SetNillableCreateDate sets the "createDate" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateDate(*t)
	}
	return uc
}

// SetUpdateDate sets the "updateDate" field.
func (uc *UserCreate) SetUpdateDate(t time.Time) *UserCreate {
	uc.mutation.SetUpdateDate(t)
	return uc
}

// SetNillableUpdateDate sets the "updateDate" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdateDate(*t)
	}
	return uc
}

// SetSessionToken sets the "sessionToken" field.
func (uc *UserCreate) SetSessionToken(s string) *UserCreate {
	uc.mutation.SetSessionToken(s)
	return uc
}

// SetNillableSessionToken sets the "sessionToken" field if the given value is not nil.
func (uc *UserCreate) SetNillableSessionToken(s *string) *UserCreate {
	if s != nil {
		uc.SetSessionToken(*s)
	}
	return uc
}

// SetSessionExpiry sets the "sessionExpiry" field.
func (uc *UserCreate) SetSessionExpiry(t time.Time) *UserCreate {
	uc.mutation.SetSessionExpiry(t)
	return uc
}

// SetNillableSessionExpiry sets the "sessionExpiry" field if the given value is not nil.
func (uc *UserCreate) SetNillableSessionExpiry(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetSessionExpiry(*t)
	}
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.UserStatus(); !ok {
		v := user.DefaultUserStatus
		uc.mutation.SetUserStatus(v)
	}
	if _, ok := uc.mutation.CreateDate(); !ok {
		v := user.DefaultCreateDate
		uc.mutation.SetCreateDate(v)
	}
	if _, ok := uc.mutation.UpdateDate(); !ok {
		v := user.DefaultUpdateDate
		uc.mutation.SetUpdateDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "User.userId"`)}
	}
	if v, ok := uc.mutation.UserId(); ok {
		if err := user.UserIdValidator(v); err != nil {
			return &ValidationError{Name: "userId", err: fmt.Errorf(`ent: validator failed for field "User.userId": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "User.userName"`)}
	}
	if v, ok := uc.mutation.UserName(); ok {
		if err := user.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "userName", err: fmt.Errorf(`ent: validator failed for field "User.userName": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UserStatus(); !ok {
		return &ValidationError{Name: "userStatus", err: errors.New(`ent: missing required field "User.userStatus"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phoneNumber", err: errors.New(`ent: missing required field "User.phoneNumber"`)}
	}
	if v, ok := uc.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phoneNumber", err: fmt.Errorf(`ent: validator failed for field "User.phoneNumber": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreateDate(); !ok {
		return &ValidationError{Name: "createDate", err: errors.New(`ent: missing required field "User.createDate"`)}
	}
	if _, ok := uc.mutation.UpdateDate(); !ok {
		return &ValidationError{Name: "updateDate", err: errors.New(`ent: missing required field "User.updateDate"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.UserId(); ok {
		_spec.SetField(user.FieldUserId, field.TypeString, value)
		_node.UserId = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := uc.mutation.UserStatus(); ok {
		_spec.SetField(user.FieldUserStatus, field.TypeBool, value)
		_node.UserStatus = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := uc.mutation.JobCd(); ok {
		_spec.SetField(user.FieldJobCd, field.TypeInt, value)
		_node.JobCd = value
	}
	if value, ok := uc.mutation.ProfileImage(); ok {
		_spec.SetField(user.FieldProfileImage, field.TypeString, value)
		_node.ProfileImage = value
	}
	if value, ok := uc.mutation.GithubLink(); ok {
		_spec.SetField(user.FieldGithubLink, field.TypeString, value)
		_node.GithubLink = value
	}
	if value, ok := uc.mutation.BlogLink(); ok {
		_spec.SetField(user.FieldBlogLink, field.TypeString, value)
		_node.BlogLink = value
	}
	if value, ok := uc.mutation.UserText(); ok {
		_spec.SetField(user.FieldUserText, field.TypeString, value)
		_node.UserText = value
	}
	if value, ok := uc.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := uc.mutation.Skill(); ok {
		_spec.SetField(user.FieldSkill, field.TypeString, value)
		_node.Skill = value
	}
	if value, ok := uc.mutation.CreateDate(); ok {
		_spec.SetField(user.FieldCreateDate, field.TypeTime, value)
		_node.CreateDate = value
	}
	if value, ok := uc.mutation.UpdateDate(); ok {
		_spec.SetField(user.FieldUpdateDate, field.TypeTime, value)
		_node.UpdateDate = value
	}
	if value, ok := uc.mutation.SessionToken(); ok {
		_spec.SetField(user.FieldSessionToken, field.TypeString, value)
		_node.SessionToken = value
	}
	if value, ok := uc.mutation.SessionExpiry(); ok {
		_spec.SetField(user.FieldSessionExpiry, field.TypeTime, value)
		_node.SessionExpiry = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
