// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DBP/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId string `json:"userId,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// UserStatus holds the value of the "userStatus" field.
	UserStatus bool `json:"userStatus,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PhoneNumber holds the value of the "phoneNumber" field.
	PhoneNumber string `json:"phoneNumber,omitempty"`
	// JobCd holds the value of the "jobCd" field.
	JobCd int `json:"jobCd,omitempty"`
	// ProfileImage holds the value of the "profileImage" field.
	ProfileImage string `json:"profileImage,omitempty"`
	// GithubLink holds the value of the "githubLink" field.
	GithubLink string `json:"githubLink,omitempty"`
	// BlogLink holds the value of the "blogLink" field.
	BlogLink string `json:"blogLink,omitempty"`
	// UserText holds the value of the "userText" field.
	UserText string `json:"userText,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Skill holds the value of the "skill" field.
	Skill string `json:"skill,omitempty"`
	// CreateDate holds the value of the "createDate" field.
	CreateDate time.Time `json:"createDate,omitempty"`
	// UpdateDate holds the value of the "updateDate" field.
	UpdateDate time.Time `json:"updateDate,omitempty"`
	// SessionToken holds the value of the "sessionToken" field.
	SessionToken string `json:"-"`
	// SessionExpiry holds the value of the "sessionExpiry" field.
	SessionExpiry time.Time `json:"sessionExpiry,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldUserStatus:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldJobCd:
			values[i] = new(sql.NullInt64)
		case user.FieldUserId, user.FieldPassword, user.FieldUserName, user.FieldEmail, user.FieldPhoneNumber, user.FieldProfileImage, user.FieldGithubLink, user.FieldBlogLink, user.FieldUserText, user.FieldCompany, user.FieldSkill, user.FieldSessionToken:
			values[i] = new(sql.NullString)
		case user.FieldCreateDate, user.FieldUpdateDate, user.FieldSessionExpiry:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUserId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				u.UserId = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldUserStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field userStatus", values[i])
			} else if value.Valid {
				u.UserStatus = value.Bool
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phoneNumber", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user.FieldJobCd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jobCd", values[i])
			} else if value.Valid {
				u.JobCd = int(value.Int64)
			}
		case user.FieldProfileImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profileImage", values[i])
			} else if value.Valid {
				u.ProfileImage = value.String
			}
		case user.FieldGithubLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field githubLink", values[i])
			} else if value.Valid {
				u.GithubLink = value.String
			}
		case user.FieldBlogLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blogLink", values[i])
			} else if value.Valid {
				u.BlogLink = value.String
			}
		case user.FieldUserText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userText", values[i])
			} else if value.Valid {
				u.UserText = value.String
			}
		case user.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				u.Company = value.String
			}
		case user.FieldSkill:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skill", values[i])
			} else if value.Valid {
				u.Skill = value.String
			}
		case user.FieldCreateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createDate", values[i])
			} else if value.Valid {
				u.CreateDate = value.Time
			}
		case user.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateDate", values[i])
			} else if value.Valid {
				u.UpdateDate = value.Time
			}
		case user.FieldSessionToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sessionToken", values[i])
			} else if value.Valid {
				u.SessionToken = value.String
			}
		case user.FieldSessionExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sessionExpiry", values[i])
			} else if value.Valid {
				u.SessionExpiry = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("userId=")
	builder.WriteString(u.UserId)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(u.UserName)
	builder.WriteString(", ")
	builder.WriteString("userStatus=")
	builder.WriteString(fmt.Sprintf("%v", u.UserStatus))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("phoneNumber=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("jobCd=")
	builder.WriteString(fmt.Sprintf("%v", u.JobCd))
	builder.WriteString(", ")
	builder.WriteString("profileImage=")
	builder.WriteString(u.ProfileImage)
	builder.WriteString(", ")
	builder.WriteString("githubLink=")
	builder.WriteString(u.GithubLink)
	builder.WriteString(", ")
	builder.WriteString("blogLink=")
	builder.WriteString(u.BlogLink)
	builder.WriteString(", ")
	builder.WriteString("userText=")
	builder.WriteString(u.UserText)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(u.Company)
	builder.WriteString(", ")
	builder.WriteString("skill=")
	builder.WriteString(u.Skill)
	builder.WriteString(", ")
	builder.WriteString("createDate=")
	builder.WriteString(u.CreateDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updateDate=")
	builder.WriteString(u.UpdateDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sessionToken=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("sessionExpiry=")
	builder.WriteString(u.SessionExpiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
